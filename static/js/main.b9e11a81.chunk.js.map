{"version":3,"sources":["component/EmployeeTable/EmployeeTable.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeTable","props","useState","input","setInput","willSortByAge","setWillSortByAge","employees","results","console","log","sort","a","b","dob","age","className","class","placeholder","onKeyUp","e","target","value","onChange","checked","type","name","id","filter","item","first","last","toLowerCase","includes","map","src","picture","large","alt","cell","App","state","data","axios","get","then","response","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oVA0FeA,MArFf,SAAuBC,GAAO,MAEFC,mBAAS,IAFP,mBAErBC,EAFqB,KAEdC,EAFc,OAGcF,oBAAS,GAHvB,mBAGrBG,EAHqB,KAGNC,EAHM,KAgBxBC,EACFN,EAAMM,WAAaN,EAAMM,UAAUC,QAAnC,YACQP,EAAMM,UAAUC,SACpB,GAUN,OARAC,QAAQC,IAAIH,EAAWN,EAAMM,UAAUC,SAEnCH,GACFE,EAAUI,MAAK,SAAUC,EAAGC,GAC1B,OAAOD,EAAEE,IAAIC,IAAMF,EAAEC,IAAIC,OAK3B,yBAAKC,UAAU,aACb,wBAAIA,UAAU,oBACZ,sDAA2B,uBAAGC,MAAM,wBAEtC,uBAAGD,UAAU,QAAb,iCAGA,wBAAIA,UAAU,SACd,6BACA,yBAAKA,UAAU,OACb,2BAAOA,UAAU,YAAYE,YAAY,iBAAiBC,QApC7C,SAACC,GAElBhB,EAASgB,EAAEC,OAAOC,WAoChB,yBAAKN,UAAU,WACb,2BAAOA,UAAU,WACfO,SAlCS,SAACH,GAChBd,EAAiBc,EAAEC,OAAOG,SAC1Bf,QAAQC,IAAIU,EAAEC,OAAOG,UAiCfC,KAAK,WACLC,KAAK,UACLC,GAAG,YACF,IANL,QAUA,yBAAKX,UAAU,OACZP,QAAQC,IAAIT,EAAMM,WAClBA,EACEqB,QAAO,SAACC,GAEP,OADeA,EAAKH,KAAKI,MAAQ,IAAMD,EAAKH,KAAKK,MACjCC,cAAcC,SAAS9B,EAAM6B,kBAG9CE,KAAI,SAACL,GACJ,OACE,yBAAKb,UAAU,qBACb,yBAAKA,UAAU,aACb,yBACEmB,IAAKN,EAAKO,QAAQC,MAClBpB,MAAM,eACNqB,IAAI,QAEN,wBAAItB,UAAU,cACXa,EAAKH,KAAKI,MADb,IACqBD,EAAKH,KAAKK,MAE/B,uBAAGf,UAAU,aAAb,UAAiCa,EAAKU,MACtC,uBAAGvB,UAAU,aAAb,QAA+Ba,EAAKf,IAAIC,aC/C3CyB,E,kDAxBb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,KAAM,IAHG,E,gEAOO,IAAD,OACjBC,IAAMC,IAAI,iDACTC,MAAM,SAAAC,GACL,EAAKC,SAAS,CAACL,KAAMI,EAASJ,Y,+BAKhC,OAEE,yBAAK1B,UAAU,aACb,kBAAC,EAAD,CAAeT,UAAWyC,KAAKP,MAAMC,Y,GAnB3BO,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.b9e11a81.chunk.js","sourcesContent":["// Import React hook and css file\nimport React, { useState } from \"react\";\nimport \"./employeeTable.css\";\n\n// Compontent\nfunction EmployeeTable(props) {\n  // React hook - first value is variable, second value is a function sets the variable. useState takes a starting value\n  const [input, setInput] = useState(\"\");\n  const [willSortByAge, setWillSortByAge] = useState(false);\n  const storeInput = (e) => {\n    // Passes in onKeyUp when function is called\n    setInput(e.target.value);\n  };\n\n  // Passes in onChange when function is called and creates a check\n  const radioAge = (e) => {\n    setWillSortByAge(e.target.checked);\n    console.log(e.target.checked);\n  };\n\n  // If both conditions exist, result comes back true, then copy will be placed into the array or an empty array\n  let employees =\n    props.employees && props.employees.results\n      ? [...props.employees.results]\n      : [];\n\n  console.log(employees, props.employees.results);\n  // When willSortByAge is true, compares age a to age b and storts by ascending order\n  if (willSortByAge) {\n    employees.sort(function (a, b) {\n      return a.dob.age - b.dob.age;\n    });\n  }\n\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"display-4 header\">\n        <strong>Employee Directory <i class=\"fas fa-pencil-alt\"></i></strong>\n      </h1>\n      <p className=\"lead\">\n       Employee Searching Made Easy!\n      </p>\n      <hr className=\"my-4\" />\n      <div>\n      <div className=\"row\">\n        <input className=\"nameInput\" placeholder=\"Search by Name\" onKeyUp={storeInput}></input>\n      </div>\n      <div className=\"row age\">\n        <input className=\"radioAge\"\n          onChange={radioAge}\n          type=\"checkbox\"\n          name=\"options\"\n          id=\"option1\"\n        />{\" \"}\n        Age\n      </div>\n      </div>\n      <div className=\"row\">\n        {console.log(props.employees)}\n        {employees\n          .filter((item) => {\n            let fullName = item.name.first + \" \" + item.name.last;\n            return fullName.toLowerCase().includes(input.toLowerCase());\n          })\n          // Map modifieds items\n          .map((item) => {\n            return (\n              <div className=\"card employeeCard\">\n                <div className=\"card-body\">\n                  <img\n                    src={item.picture.large}\n                    class=\"card-img-top\"\n                    alt=\"...\"\n                  />\n                  <h5 className=\"card-title\">\n                    {item.name.first} {item.name.last}\n                  </h5>\n                  <p className=\"card-text\">Phone: {item.cell}</p>\n                  <p className=\"card-text\">Age: {item.dob.age}</p>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\n// props.employees.results.map to loop through results and create HTML\n\nexport default EmployeeTable;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport axios from \"axios\";\nimport EmployeeTable from \"./component/EmployeeTable/EmployeeTable\"\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      data: []\n    }\n  }\n\n  componentDidMount(){\n    axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\n    .then (response => {\n      this.setState({data: response.data})\n    })\n  }\n\n  render(){\n    return (\n      // MY HTML FOR PAGE (MY REACT COMPONENTS)\n      <div className=\"container\">\n        <EmployeeTable employees={this.state.data} />  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}